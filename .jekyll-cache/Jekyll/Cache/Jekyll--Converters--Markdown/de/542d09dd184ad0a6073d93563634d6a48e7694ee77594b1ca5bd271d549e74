I" <p>You know what sucks? Developing emails. This is one email project done for Garmin that I tried having some fun on, and made a bit more interesting by adding dynamic images too.</p>

<h1 id="the-idea">The idea</h1>
<p>We wanted recipients of the email to feel like they were a part of something bigger, contributing their fitness tracking data live to help the world’s total, as it raced to beat its yesterday.</p>

<h4 id="whats-the-point">What’s the point</h4>
<p>Inspire movement &amp; drive traffic &amp; for Beat Yesterday campaign site.</p>

<h1 id="make-it-update-itself">Make it update itself?</h1>

<p>Despite the web changing constantly, emails are still stuck ten years in the past in terms of tech, which makes doing something different really hard.</p>

<h4 id="gifs-duh">Gifs, Duh</h4>
<p>I love <a href="https://dribbble.com/HansE">Gifs</a> they’re especially powerful when used subtly and with class. The website, and the campaign were based on dynamic live data, so it seemed the perfect opportunity to leverage gifs.
s</p>
<h4 id="actual-live-data">Actual live data</h4>
<p>Here’s the hard part: Get the email to update to the actual live cumulative total of data that was coming in from Garmin Connect. So that if I opened the email at 3:55pm, I got our current count of steps the world needs left to beat yesterday’s step count. A 60 second gif turned out to be a good balance between average open time, and performance/file size.</p>

<h4 id="the-breakdown">The breakdown</h4>
<ol>
  <li>Start with an image src linked to a generic 60 gif, so something will show.</li>
  <li>Hook in to home-brewed API to calc steps left to beat yesterday = total steps made today - yesterdays total steps .</li>
  <li>Calculate the next 60 seconds of data.</li>
  <li>Generate 60 second gif that counted over 60 seconds worth of data.</li>
  <li>Run a CRON job every 60 seconds that ran a bash script to post the new 60 second gif from a dynamic PHP server to a static server where it would be viewed in the email (probably not best practice, but got the job done).
<span class="emails"></span></li>
</ol>

<h4 id="dynamic-dynamic-images">Dynamic, dynamic images</h4>
<p>So, the email isn’t actually running a script, it’s simply linking to the same gif, that’s updated on the server every 60 seconds. Several of countdowns write-ups I read link to a script that runs some trickery to work in emails, or create a gif where the last frame is constantly updated.</p>

<p>The email we were sending needed to be a bit more compatible, and assets needed to be run off of a static server (had the potential to be accessed by over 500k users at a time). Using a GIF turned out to be a bit more compatible (some versions of Outlook only show the first frame of gifs, but most other major clients rendered fine), and running the script on a separate server didn’t require the load and performance hit of using a dynamic server everytime someone opened the email.</p>

<h4 id="gmail-too">Gmail, too</h4>
<p>Turns out, gmail <a href="https://litmus.com/blog/gmail-adds-image-caching-what-you-need-to-know">caches images</a> across emails. So, if I have a Gmail account and open the email first, Gmail makes a ‘Gmail-cache’ version of that image and serves it to the next person on Gmail who opens the same email.</p>

<p>To allow the gif to be reloaded from our static servers every 60 seconds, we were able to <a href="http://www.redant.com.au/how-we-do/cache-busting-gmail-new-image-caching/">cache bust</a> using unique queries on the end of the image src.</p>

<h1 id="resources--credits">Resources &amp; Credits</h1>
<p>It’s shockingly difficult to find many technical details on email countdowns and dynamic email images. The best I found, is <a href="https://litmus.com/community/learning/27-how-to-add-a-countdown-timer-to-your-email">this article</a> by <a href="http://codepen.io/Omgitsonlyalex/">Alex Ilhan</a>. The foundation of the script used is based on his script for a <a href="https://github.com/Omgitsonlyalex/EmailCountdown">countdown timer</a> on Github, so again credit to Alex.</p>

<p>You can check out my (somewhat) sanitized PHP up on <a href="https://github.com/HansEngebretsen/dynamic-email">github</a>.</p>

<h1 id="the-result">The Result</h1>

<p data-height="500" data-theme-id="21124" data-slug-hash="qbyYEr" data-default-tab="result" data-user="hans" data-embed-version="2" class="codepen">See the Pen <a href="https://codepen.io/hans/pen/qbyYEr/">Self-updating HTML email</a> by Hans Engebretsen (<a href="http://codepen.io/hans">@hans</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async="" src="//assets.codepen.io/assets/embed/ei.js"></script>

<h6 id="disclaimer">Disclaimer</h6>
<p><em>I am by no means a PHP expert, so I’m 100% positive, there’s a better way to do this, this is what got the job done for me.</em></p>
:ET